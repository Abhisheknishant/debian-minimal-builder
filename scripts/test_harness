#!/usr/bin/env expect
#
# Use the "expect" tool to test that we actually can boot to userspace
#
# Copyright (C) 2018 Hamish Coleman <hamish@zot.org>

# TODO
# - catch any fatal errors during tests and ensure that qemu_stop has
#   been run

# Ensure that we see the output
log_user 1
# Set the default time to wait for matches
set timeout 60

# First arg is the command to run
set test_command [ lindex $argv 0 ]
if {$test_command eq ""} {
    puts "Need test_command"
    exit 1
}

set tests [list]

# all other args are variables to set or tests to run
set index 1
while {$index < $argc} {
    set kvpair [ split [ lindex $argv $index ] "=" ]

    if {[llength $kvpair] == 2} {
        # we found an equals sign, so this is a variable assignment
        eval global [ lindex $kvpair 0 ]
        eval set [ lindex $kvpair 0 ] [ lindex $kvpair 1 ]
    } else {
        # this is actually a named test to run
        lappend tests $kvpair
    }

    incr index
}
unset index

if {[llength $tests] == 0} {
    puts "Warning: No tests to run, this is unlikely to be what you want\n"
    exit 1
}

# Since we are expecting to run qemu, provide a function to kill it off
proc qemu_stop {} {
    global pid
    puts "Sending terminal escape sequence to tell Qemu to exit\n"
    send "\x01x"
    puts "Sending kill signal to Qemu $pid\n"
    exec kill $pid
    puts "Closing expect channel\n"
    close
    puts "Waiting for sub-process exit\n"
    wait
}

# Provide a simple function to stop with error and message
proc bad { errorcode message } {
    global testname
    puts "\n\n"
    puts "ERROR: $testname: $message\n"
    qemu_stop
    exit $errorcode
}

# Start the command under test
set pid [eval spawn $test_command]

foreach testname $tests {
    puts "\n\nTesting with $testname"
    set result [source $testname]
    # TODO - check for unexpected return values and exit early
}

# We made it to the end of the tests with no fatal errors
puts "\n\n"
puts "OK\n"

qemu_stop
exit 0
