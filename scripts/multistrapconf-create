#!/usr/bin/env python3
#
# Reading the correct files from the configured search path, construct
# the multistrap config file that we will actually use
#
# TODO:
# - support loading multiple sources files

import argparse
import jinja2


def argsparser():
    parser = argparse.ArgumentParser(
            description='Create the multistrap conf')
    parser.add_argument('--source', required=True,
                        help='The base name of the debian source to load')
    parser.add_argument('--packagefile', nargs='+',
                        help='Add the packages listed in this file')
    parser.add_argument('--template', required=True,
                        help='The template multistrap conf to use')
    parser.add_argument('--output', required=True,
                        help='Name of the output file')

    return parser.parse_args()


def read_packages(files):
    """Read lists of package names from each of the given files"""

    packages = dict()

    for file in files:
        input = open(file, 'r')

        for line in input:
            line = line.strip()
            if not line:
                continue
            if line.startswith('#'):
                continue
            packages[line] = 1

    return list(packages.keys())


def read_source(file):
    """Reads the debian package source file"""
    # TODO:
    # - surely there is a generic "ignore comment lines and blank line" parser
    # - of course, there is also deb822 style files to be concerned about

    input = open(file, 'r')
    source = dict()

    for line in input:
        line = line.strip()
        if not line:
            continue
        if line.startswith('#'):
            continue

        fields = line.split()

        if fields[0] != 'deb':
            raise ValueError("Only 'deb' lines are supported")

        if 'uri' in source:
            raise ValueError("Only supports one source per file")

        source['uri'] = fields[1]
        source['suite'] = fields[2]
        source['components'] = fields[3:]

    return source


def main():
    args = argsparser()

    packages = list()

    if args.packagefile:
        packages = read_packages(args.packagefile)

    source = read_source(args.source)

    env = jinja2.Environment(
            # TODO
            # - use config search path from Makefile
            loader=jinja2.FileSystemLoader('.')
    )
    template = env.get_template(args.template)

    output = open(args.output, 'w')

    print(
        template.render(
            packages=packages,
            source=source,
        ),
        file=output
    )


if __name__ == '__main__':
    main()
